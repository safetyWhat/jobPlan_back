// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id           Int                @id @default(autoincrement())
  firstName    String
  lastName     String
  active       Boolean            @default(true)
  uapId        String?
  sbId         String             @unique
  phone        String             @unique
  email        String?            @unique
  department   Department?        @relation(fields: [departmentId], references: [id])
  departmentId Int?
  position     Position?          @relation(fields: [positionId], references: [id])
  positionId   Int?
  hiredAt      DateTime?
  wage         Float?
  trainings    EmployeeTraining[]
  medicals     EmployeeMedical[]
  shifts       Shift[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Employee  Employee[]
}

model Position {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Employee  Employee[]
}

model Training {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  validity    Int? // Duration in months (optional)
  employees   EmployeeTraining[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model EmployeeTraining {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  training    Training  @relation(fields: [trainingId], references: [id])
  trainingId  Int
  completedAt DateTime
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([employeeId, trainingId, completedAt])
}

model Medical {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  validity    Int? // Duration in months (optional)
  employees   EmployeeMedical[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model EmployeeMedical {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  medical     Medical   @relation(fields: [medicalId], references: [id])
  medicalId   Int
  completedAt DateTime
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([employeeId, medicalId, completedAt])
}

model Shift {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  shiftDate  DateTime @db.Date
  jobNum     String
  comment    String?
  hours      Int?
  sbJobId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
